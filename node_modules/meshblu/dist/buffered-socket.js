// Generated by CoffeeScript 1.12.6
(function() {
  var BufferedSocket, DEFAULT_BUFFER_RATE, ProxySocket, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  ProxySocket = require('./proxy-socket');

  DEFAULT_BUFFER_RATE = 100;

  BufferedSocket = (function(superClass) {
    extend(BufferedSocket, superClass);

    function BufferedSocket(arg, dependencies) {
      var ReconnectSocket, bufferRate, ref, srvOptions;
      bufferRate = arg.bufferRate, srvOptions = arg.srvOptions;
      if (dependencies == null) {
        dependencies = {};
      }
      this._processSendQueue = bind(this._processSendQueue, this);
      this.send = bind(this.send, this);
      this.connect = bind(this.connect, this);
      this.close = bind(this.close, this);
      ReconnectSocket = (ref = dependencies.ReconnectSocket) != null ? ref : require('./reconnect-socket');
      this._socket = new ReconnectSocket({
        srvOptions: srvOptions
      });
      this._sendQueue = [];
      this._throttledProcessEmitQueue = _.throttle(this._processSendQueue, bufferRate != null ? bufferRate : DEFAULT_BUFFER_RATE);
      BufferedSocket.__super__.constructor.apply(this, arguments);
    }

    BufferedSocket.prototype.close = function(callback) {
      return this._socket.close(callback);
    };

    BufferedSocket.prototype.connect = function(callback) {
      if (callback != null) {
        throw new Error('connect should not take a callback');
      }
      return this._socket.connect();
    };

    BufferedSocket.prototype.send = function() {
      this._sendQueue.push(arguments);
      return this._throttledProcessEmitQueue();
    };

    BufferedSocket.prototype._processSendQueue = function() {
      var args, ref;
      if (_.isEmpty(this._sendQueue)) {
        return;
      }
      args = this._sendQueue.shift();
      (ref = this._socket).send.apply(ref, args);
      return _.defer(this._throttledProcessEmitQueue);
    };

    return BufferedSocket;

  })(ProxySocket);

  module.exports = BufferedSocket;

}).call(this);

//# sourceMappingURL=buffered-socket.js.map
