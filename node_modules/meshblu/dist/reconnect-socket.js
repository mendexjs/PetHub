// Generated by CoffeeScript 1.12.6
(function() {
  var Backoff, DEFAULT_BACKOFF_MAX, DEFAULT_BACKOFF_MIN, DEFAULT_CONNECTION_TIMEOUT, DEFAULT_JITTER, ProxySocket, ReconnectSocket, SrvSocket, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Backoff = require('backo');

  _ = require('lodash');

  ProxySocket = require('./proxy-socket');

  SrvSocket = require('./srv-socket');

  DEFAULT_BACKOFF_MIN = 0;

  DEFAULT_BACKOFF_MAX = 30 * 1000;

  DEFAULT_CONNECTION_TIMEOUT = 30 * 1000;

  DEFAULT_JITTER = 0.5;

  ReconnectSocket = (function(superClass) {
    extend(ReconnectSocket, superClass);

    function ReconnectSocket(options, dependencies) {
      var ref, ref1, ref2, ref3, ref4;
      if (options == null) {
        options = {};
      }
      if (dependencies == null) {
        dependencies = {};
      }
      this._onConnectionTimeout = bind(this._onConnectionTimeout, this);
      this._onDisconnect = bind(this._onDisconnect, this);
      this._onConnect = bind(this._onConnect, this);
      this._onReady = bind(this._onReady, this);
      this.send = bind(this.send, this);
      this.connect = bind(this.connect, this);
      this.close = bind(this.close, this);
      this._connectionTimeout = (ref = options.connectionTimeout) != null ? ref : DEFAULT_CONNECTION_TIMEOUT;
      this._backoff = new Backoff({
        min: (ref1 = options.backoffMin) != null ? ref1 : DEFAULT_BACKOFF_MIN,
        max: (ref2 = options.backoffMax) != null ? ref2 : DEFAULT_BACKOFF_MAX,
        jitter: (ref3 = options.jitter) != null ? ref3 : DEFAULT_JITTER
      });
      this.SrvSocket = (ref4 = dependencies.SrvSocket) != null ? ref4 : SrvSocket;
      this.closing = false;
      this._socket = new this.SrvSocket(options.srvOptions);
      this._socket.on('ready', this._onReady);
      this._socket.on('connect', this._onConnect);
      this._socket.on('disconnect', this._onDisconnect);
      ReconnectSocket.__super__.constructor.apply(this, arguments);
    }

    ReconnectSocket.prototype.close = function(callback) {
      if (this.closing) {
        return callback();
      }
      this.closing = true;
      return this._socket.close(callback);
    };

    ReconnectSocket.prototype.connect = function(callback) {
      if (callback != null) {
        throw new Error('connect should not take a callback');
      }
      this._connectTimeout = setTimeout(this._onConnectionTimeout, this._connectionTimeout);
      return this._socket.connect();
    };

    ReconnectSocket.prototype.send = function() {
      var ref;
      return (ref = this._socket).send.apply(ref, arguments);
    };

    ReconnectSocket.prototype._onReady = function() {
      return this._backoff.reset();
    };

    ReconnectSocket.prototype._onConnect = function() {
      return clearTimeout(this._connectTimeout);
    };

    ReconnectSocket.prototype._onDisconnect = function() {
      var backoff;
      if (this.closing) {
        return;
      }
      clearTimeout(this._reconnectTimeout);
      backoff = this._backoff.duration();
      return this._reconnectTimeout = setTimeout(this.connect, backoff);
    };

    ReconnectSocket.prototype._onConnectionTimeout = function(callback) {
      if (this.closing) {
        return;
      }
      this.emit('notReady', {
        status: 504,
        message: 'Connection Timeout'
      });
      return this._onDisconnect();
    };

    return ReconnectSocket;

  })(ProxySocket);

  module.exports = ReconnectSocket;

}).call(this);

//# sourceMappingURL=reconnect-socket.js.map
